# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "main", "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
#    env:
#      JASYPT_PASSWORD: ${{ secrets.APPLICATION_SECRET }}
#      jasypt.encryptor.password: ${{ secrets.APPLICATION_SECRET }}

    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle build
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build & push to prod
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_REPO }} .
          docker push ${{ secrets.DOCKERHUB_REPO }}

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST_EC2 }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_REPO }}
            sudo docker run -d -p 80:8080 ${{ secrets.DOCKERHUB_REPO }}
            sudo docker container prune -f
            sudo docker image prune -f